
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaleftORleftANDleftIMmMImIleftSUMRESleftMULDIVrightUMINUSrightNOTAND BOOL CA CARACTER CE CHAR COMA COS DEF DIV DPNTO ELSE ENTERO EQ EXP FALSE FLOAT I ID IF INT LEN LLA LLE LOG M MI MUL NEWLINE NOT OR PA PE PNTO REAL RES RETURN SEN SUM TRUE TYPE WHILE m mIprograma : linea programa\n                    | linea : expresion NEWLINE\n                | NEWLINEexpresion : tipo lista_declaracioneslista_declaraciones : declaracion\n                            | declaracion COMA lista_declaracionesdeclaracion : ID\n                    | ID EQ expresion\n                    | CE ENTERO CA IDexpresion : ID PNTO LENelemento : ID CE ENTERO CAexpresion : ID CE ENTERO CA EQ expresionexpresion : ID EQ expresionexpresion : TYPE ID DPNTO grupo_apertura bloque_propiedades grupo_cierregrupo_apertura : opt_newline LLE opt_newlinegrupo_cierre : opt_newline LLA opt_newlineopt_newline : NEWLINE\n                    | bloque_propiedades : propiedad\n                            | propiedad NEWLINE\n                            | propiedad NEWLINE bloque_propiedades\n                            | propiedad bloque_propiedades\n                            | NEWLINE bloque_propiedadespropiedad : tipo lista_idslista_ids : ID\n                    | ID COMA lista_idsexpresion : idsids : ID IDexpresion : ID PNTO IDexpresion : tipo lista_idsexpresion : ID PNTO ID EQ expresionexpresion : IF expresion bloqueexpresion : IF expresion bloque ELSE bloqueexpresion : WHILE expresion bloquebloque : grupo_apertura expresiones grupo_cierreexpresiones : expresion\n                | expresion NEWLINE\n                | expresion NEWLINE expresionestipo_base : INT\n                    | FLOAT\n                    | BOOL\n                    | CHARtipo : tipo_base\n                | tipo_base CE ENTERO CAexpresion : expresion OR expresion_logica\n                    | expresion_logicaexpresion_logica : expresion_logica AND expresion_relacional\n                           | expresion_relacionalexpresion_relacional : termino_aritmetico I termino_aritmetico\n                               | termino_aritmetico M termino_aritmetico\n                               | termino_aritmetico m termino_aritmetico\n                               | termino_aritmetico MI termino_aritmetico\n                               | termino_aritmetico mI termino_aritmetico\n                               | termino_aritmeticotermino_aritmetico : termino_aritmetico SUM factor\n                             | termino_aritmetico RES factor\n                             | factorfactor : factor MUL elemento\n                 | factor DIV elemento\n                 | elementobooleano : TRUE\n                    | FALSEelemento : ENTERO\n                    | REAL\n                    | booleano\n                    | CARACTER\n                    | ID\n                    | PE expresion PA\n                    | RES elemento %prec UMINUS\n                    | NOT elemento\n                    | SEN PE expresion PA\n                    | COS PE expresion PA\n                    | EXP PE expresion PA\n                    | LOG PE expresion PA'
    
_lr_action_items = {'$end':([0,1,2,4,34,35,],[-2,0,-2,-4,-1,-3,]),'NEWLINE':([0,2,3,4,6,7,9,12,14,19,20,22,23,24,25,32,33,35,37,38,39,40,42,47,48,60,61,63,68,73,74,76,77,78,81,82,83,85,86,87,88,89,90,91,92,93,95,100,101,102,103,104,107,108,109,110,111,112,115,116,117,118,119,120,122,123,124,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,],[4,4,35,-4,-68,-64,-28,-47,-49,-55,-58,-61,-65,-66,-67,-62,-63,-3,-5,-31,-6,-8,-29,81,81,-70,-68,-71,-46,-30,-11,-14,81,-33,-18,-35,-48,-50,-51,-52,-53,-54,-56,-57,-59,-60,-69,-7,-8,-26,-27,-9,-12,124,81,81,129,81,-72,-73,-74,-75,-10,-32,81,134,124,-34,-36,-38,-16,-12,-13,-15,124,-23,-24,-25,81,-39,-22,-17,]),'ID':([0,2,4,5,6,8,10,11,13,15,16,17,18,21,26,27,35,36,43,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,69,70,71,79,81,105,106,112,113,121,125,129,130,],[6,6,-4,40,42,46,6,6,-44,-40,-41,-42,-43,61,6,61,-3,61,73,6,61,61,61,61,61,61,61,61,61,61,6,6,6,6,101,102,6,6,-18,119,6,-19,-45,6,102,6,-16,]),'TYPE':([0,2,4,10,11,26,35,45,64,65,66,67,71,79,81,106,112,121,129,130,],[8,8,-4,8,8,8,-3,8,8,8,8,8,8,8,-18,8,-19,8,8,-16,]),'IF':([0,2,4,10,11,26,35,45,64,65,66,67,71,79,81,106,112,121,129,130,],[10,10,-4,10,10,10,-3,10,10,10,10,10,10,10,-18,10,-19,10,10,-16,]),'WHILE':([0,2,4,10,11,26,35,45,64,65,66,67,71,79,81,106,112,121,129,130,],[11,11,-4,11,11,11,-3,11,11,11,11,11,11,11,-18,11,-19,11,11,-16,]),'INT':([0,2,4,10,11,26,35,45,64,65,66,67,71,79,81,102,103,106,108,112,121,123,124,129,130,134,137,],[15,15,-4,15,15,15,-3,15,15,15,15,15,15,15,-18,-26,-27,15,15,-19,15,15,15,15,-16,15,-25,]),'FLOAT':([0,2,4,10,11,26,35,45,64,65,66,67,71,79,81,102,103,106,108,112,121,123,124,129,130,134,137,],[16,16,-4,16,16,16,-3,16,16,16,16,16,16,16,-18,-26,-27,16,16,-19,16,16,16,16,-16,16,-25,]),'BOOL':([0,2,4,10,11,26,35,45,64,65,66,67,71,79,81,102,103,106,108,112,121,123,124,129,130,134,137,],[17,17,-4,17,17,17,-3,17,17,17,17,17,17,17,-18,-26,-27,17,17,-19,17,17,17,17,-16,17,-25,]),'CHAR':([0,2,4,10,11,26,35,45,64,65,66,67,71,79,81,102,103,106,108,112,121,123,124,129,130,134,137,],[18,18,-4,18,18,18,-3,18,18,18,18,18,18,18,-18,-26,-27,18,18,-19,18,18,18,18,-16,18,-25,]),'ENTERO':([0,2,4,10,11,21,26,27,35,36,41,44,45,49,50,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,81,94,106,112,121,129,130,],[7,7,-4,7,7,7,7,7,-3,7,72,75,7,7,84,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-18,114,7,-19,7,7,-16,]),'REAL':([0,2,4,10,11,21,26,27,35,36,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,81,106,112,121,129,130,],[23,23,-4,23,23,23,23,23,-3,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-18,23,-19,23,23,-16,]),'CARACTER':([0,2,4,10,11,21,26,27,35,36,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,81,106,112,121,129,130,],[25,25,-4,25,25,25,25,25,-3,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-18,25,-19,25,25,-16,]),'PE':([0,2,4,10,11,21,26,27,28,29,30,31,35,36,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,81,106,112,121,129,130,],[26,26,-4,26,26,26,26,26,64,65,66,67,-3,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-18,26,-19,26,26,-16,]),'RES':([0,2,4,6,7,10,11,19,20,21,22,23,24,25,26,27,32,33,35,36,45,49,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,71,79,81,85,86,87,88,89,90,91,92,93,95,106,107,112,115,116,117,118,121,129,130,131,],[21,21,-4,-68,-64,21,21,57,-58,21,-61,-65,-66,-67,21,21,-62,-63,-3,21,21,21,21,21,21,21,21,21,21,21,21,-70,-68,-71,21,21,21,21,21,21,-18,57,57,57,57,57,-56,-57,-59,-60,-69,21,-12,-19,-72,-73,-74,-75,21,21,-16,-12,]),'NOT':([0,2,4,10,11,21,26,27,35,36,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,81,106,112,121,129,130,],[27,27,-4,27,27,27,27,27,-3,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-18,27,-19,27,27,-16,]),'SEN':([0,2,4,10,11,21,26,27,35,36,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,81,106,112,121,129,130,],[28,28,-4,28,28,28,28,28,-3,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-18,28,-19,28,28,-16,]),'COS':([0,2,4,10,11,21,26,27,35,36,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,81,106,112,121,129,130,],[29,29,-4,29,29,29,29,29,-3,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-18,29,-19,29,29,-16,]),'EXP':([0,2,4,10,11,21,26,27,35,36,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,81,106,112,121,129,130,],[30,30,-4,30,30,30,30,30,-3,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-18,30,-19,30,30,-16,]),'LOG':([0,2,4,10,11,21,26,27,35,36,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,81,106,112,121,129,130,],[31,31,-4,31,31,31,31,31,-3,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-18,31,-19,31,31,-16,]),'TRUE':([0,2,4,10,11,21,26,27,35,36,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,81,106,112,121,129,130,],[32,32,-4,32,32,32,32,32,-3,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-18,32,-19,32,32,-16,]),'FALSE':([0,2,4,10,11,21,26,27,35,36,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,81,106,112,121,129,130,],[33,33,-4,33,33,33,33,33,-3,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-18,33,-19,33,33,-16,]),'OR':([3,6,7,9,12,14,19,20,22,23,24,25,32,33,37,38,39,40,42,47,48,60,61,62,63,68,73,74,76,78,81,82,83,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,107,111,115,116,117,118,119,120,126,127,131,132,133,138,141,],[36,-68,-64,-28,-47,-49,-55,-58,-61,-65,-66,-67,-62,-63,-5,-31,-6,-8,-29,36,36,-70,-68,36,-71,-46,-30,-11,36,-33,-18,-35,-48,-50,-51,-52,-53,-54,-56,-57,-59,-60,-69,36,36,36,36,-7,-8,-26,-27,36,-12,36,-72,-73,-74,-75,-10,36,-34,-36,-12,36,-15,-19,-17,]),'CE':([5,6,13,15,16,17,18,61,69,113,],[41,44,50,-40,-41,-42,-43,94,41,-45,]),'PNTO':([6,],[43,]),'EQ':([6,40,73,101,107,],[45,71,106,71,121,]),'MUL':([6,7,20,22,23,24,25,32,33,60,61,63,90,91,92,93,95,107,115,116,117,118,131,],[-68,-64,58,-61,-65,-66,-67,-62,-63,-70,-68,-71,58,58,-59,-60,-69,-12,-72,-73,-74,-75,-12,]),'DIV':([6,7,20,22,23,24,25,32,33,60,61,63,90,91,92,93,95,107,115,116,117,118,131,],[-68,-64,59,-61,-65,-66,-67,-62,-63,-70,-68,-71,59,59,-59,-60,-69,-12,-72,-73,-74,-75,-12,]),'I':([6,7,19,20,22,23,24,25,32,33,60,61,63,90,91,92,93,95,107,115,116,117,118,131,],[-68,-64,51,-58,-61,-65,-66,-67,-62,-63,-70,-68,-71,-56,-57,-59,-60,-69,-12,-72,-73,-74,-75,-12,]),'M':([6,7,19,20,22,23,24,25,32,33,60,61,63,90,91,92,93,95,107,115,116,117,118,131,],[-68,-64,52,-58,-61,-65,-66,-67,-62,-63,-70,-68,-71,-56,-57,-59,-60,-69,-12,-72,-73,-74,-75,-12,]),'m':([6,7,19,20,22,23,24,25,32,33,60,61,63,90,91,92,93,95,107,115,116,117,118,131,],[-68,-64,53,-58,-61,-65,-66,-67,-62,-63,-70,-68,-71,-56,-57,-59,-60,-69,-12,-72,-73,-74,-75,-12,]),'MI':([6,7,19,20,22,23,24,25,32,33,60,61,63,90,91,92,93,95,107,115,116,117,118,131,],[-68,-64,54,-58,-61,-65,-66,-67,-62,-63,-70,-68,-71,-56,-57,-59,-60,-69,-12,-72,-73,-74,-75,-12,]),'mI':([6,7,19,20,22,23,24,25,32,33,60,61,63,90,91,92,93,95,107,115,116,117,118,131,],[-68,-64,55,-58,-61,-65,-66,-67,-62,-63,-70,-68,-71,-56,-57,-59,-60,-69,-12,-72,-73,-74,-75,-12,]),'SUM':([6,7,19,20,22,23,24,25,32,33,60,61,63,85,86,87,88,89,90,91,92,93,95,107,115,116,117,118,131,],[-68,-64,56,-58,-61,-65,-66,-67,-62,-63,-70,-68,-71,56,56,56,56,56,-56,-57,-59,-60,-69,-12,-72,-73,-74,-75,-12,]),'AND':([6,7,12,14,19,20,22,23,24,25,32,33,60,61,63,68,83,85,86,87,88,89,90,91,92,93,95,107,115,116,117,118,131,],[-68,-64,49,-49,-55,-58,-61,-65,-66,-67,-62,-63,-70,-68,-71,49,-48,-50,-51,-52,-53,-54,-56,-57,-59,-60,-69,-12,-72,-73,-74,-75,-12,]),'LLE':([6,7,9,12,14,19,20,22,23,24,25,32,33,37,38,39,40,42,47,48,60,61,63,68,73,74,76,77,78,80,81,82,83,85,86,87,88,89,90,91,92,93,95,100,101,102,103,104,107,109,115,116,117,118,119,120,126,127,131,132,133,138,141,],[-68,-64,-28,-47,-49,-55,-58,-61,-65,-66,-67,-62,-63,-5,-31,-6,-8,-29,-19,-19,-70,-68,-71,-46,-30,-11,-14,-19,-33,112,-18,-35,-48,-50,-51,-52,-53,-54,-56,-57,-59,-60,-69,-7,-8,-26,-27,-9,-12,-19,-72,-73,-74,-75,-10,-32,-34,-36,-12,-13,-15,-19,-17,]),'PA':([6,7,9,12,14,19,20,22,23,24,25,32,33,37,38,39,40,42,60,61,62,63,68,73,74,76,78,81,82,83,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,107,115,116,117,118,119,120,126,127,131,132,133,138,141,],[-68,-64,-28,-47,-49,-55,-58,-61,-65,-66,-67,-62,-63,-5,-31,-6,-8,-29,-70,-68,95,-71,-46,-30,-11,-14,-33,-18,-35,-48,-50,-51,-52,-53,-54,-56,-57,-59,-60,-69,115,116,117,118,-7,-8,-26,-27,-9,-12,-72,-73,-74,-75,-10,-32,-34,-36,-12,-13,-15,-19,-17,]),'COMA':([6,7,9,12,14,19,20,22,23,24,25,32,33,37,38,39,40,42,60,61,63,68,73,74,76,78,81,82,83,85,86,87,88,89,90,91,92,93,95,100,101,102,103,104,107,115,116,117,118,119,120,126,127,131,132,133,138,141,],[-68,-64,-28,-47,-49,-55,-58,-61,-65,-66,-67,-62,-63,-5,-31,69,70,-29,-70,-68,-71,-46,-30,-11,-14,-33,-18,-35,-48,-50,-51,-52,-53,-54,-56,-57,-59,-60,-69,-7,-8,70,-27,-9,-12,-72,-73,-74,-75,-10,-32,-34,-36,-12,-13,-15,-19,-17,]),'LLA':([6,7,9,12,14,19,20,22,23,24,25,32,33,37,38,39,40,42,60,61,63,68,73,74,76,78,81,82,83,85,86,87,88,89,90,91,92,93,95,100,101,102,103,104,107,110,111,115,116,117,118,119,120,122,123,126,127,128,129,131,132,133,134,135,136,137,138,139,140,141,],[-68,-64,-28,-47,-49,-55,-58,-61,-65,-66,-67,-62,-63,-5,-31,-6,-8,-29,-70,-68,-71,-46,-30,-11,-14,-33,-18,-35,-48,-50,-51,-52,-53,-54,-56,-57,-59,-60,-69,-7,-8,-26,-27,-9,-12,-19,-37,-72,-73,-74,-75,-10,-32,-19,-20,-34,-36,138,-38,-12,-13,-15,-21,-23,-24,-25,-19,-39,-22,-17,]),'LEN':([43,],[74,]),'DPNTO':([46,],[77,]),'CA':([72,75,84,114,],[105,107,113,131,]),'ELSE':([78,81,127,138,141,],[109,-18,-36,-19,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,2,],[1,34,]),'linea':([0,2,],[2,2,]),'expresion':([0,2,10,11,26,45,64,65,66,67,71,79,106,121,129,],[3,3,47,48,62,76,96,97,98,99,104,111,120,132,111,]),'tipo':([0,2,10,11,26,45,64,65,66,67,71,79,106,108,121,123,124,129,134,],[5,5,5,5,5,5,5,5,5,5,5,5,5,125,5,125,125,5,125,]),'ids':([0,2,10,11,26,45,64,65,66,67,71,79,106,121,129,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'expresion_logica':([0,2,10,11,26,36,45,64,65,66,67,71,79,106,121,129,],[12,12,12,12,12,68,12,12,12,12,12,12,12,12,12,12,]),'tipo_base':([0,2,10,11,26,45,64,65,66,67,71,79,106,108,121,123,124,129,134,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'expresion_relacional':([0,2,10,11,26,36,45,49,64,65,66,67,71,79,106,121,129,],[14,14,14,14,14,14,14,83,14,14,14,14,14,14,14,14,14,]),'termino_aritmetico':([0,2,10,11,26,36,45,49,51,52,53,54,55,64,65,66,67,71,79,106,121,129,],[19,19,19,19,19,19,19,19,85,86,87,88,89,19,19,19,19,19,19,19,19,19,]),'factor':([0,2,10,11,26,36,45,49,51,52,53,54,55,56,57,64,65,66,67,71,79,106,121,129,],[20,20,20,20,20,20,20,20,20,20,20,20,20,90,91,20,20,20,20,20,20,20,20,20,]),'elemento':([0,2,10,11,21,26,27,36,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,106,121,129,],[22,22,22,22,60,22,63,22,22,22,22,22,22,22,22,22,22,92,93,22,22,22,22,22,22,22,22,22,]),'booleano':([0,2,10,11,21,26,27,36,45,49,51,52,53,54,55,56,57,58,59,64,65,66,67,71,79,106,121,129,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'lista_declaraciones':([5,69,],[37,100,]),'lista_ids':([5,70,125,],[38,103,137,]),'declaracion':([5,69,],[39,39,]),'bloque':([47,48,109,],[78,82,126,]),'grupo_apertura':([47,48,77,109,],[79,79,108,79,]),'opt_newline':([47,48,77,109,110,112,122,138,],[80,80,80,80,128,130,128,141,]),'expresiones':([79,129,],[110,139,]),'bloque_propiedades':([108,123,124,134,],[122,135,136,140,]),'propiedad':([108,123,124,134,],[123,123,123,123,]),'grupo_cierre':([110,122,],[127,133,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> linea programa','programa',2,'p_programa','parser.py',42),
  ('programa -> <empty>','programa',0,'p_programa','parser.py',43),
  ('linea -> expresion NEWLINE','linea',2,'p_linea','parser.py',47),
  ('linea -> NEWLINE','linea',1,'p_linea','parser.py',48),
  ('expresion -> tipo lista_declaraciones','expresion',2,'p_declaracion_variable','parser.py',54),
  ('lista_declaraciones -> declaracion','lista_declaraciones',1,'p_lista_declaraciones','parser.py',113),
  ('lista_declaraciones -> declaracion COMA lista_declaraciones','lista_declaraciones',3,'p_lista_declaraciones','parser.py',114),
  ('declaracion -> ID','declaracion',1,'p_declaracion','parser.py',122),
  ('declaracion -> ID EQ expresion','declaracion',3,'p_declaracion','parser.py',123),
  ('declaracion -> CE ENTERO CA ID','declaracion',4,'p_declaracion','parser.py',124),
  ('expresion -> ID PNTO LEN','expresion',3,'p_expresion_vector_len','parser.py',136),
  ('elemento -> ID CE ENTERO CA','elemento',4,'p_elemento_acceso_vector','parser.py',146),
  ('expresion -> ID CE ENTERO CA EQ expresion','expresion',6,'p_asignacion_vector_elemento','parser.py',163),
  ('expresion -> ID EQ expresion','expresion',3,'p_asignacion_variable','parser.py',180),
  ('expresion -> TYPE ID DPNTO grupo_apertura bloque_propiedades grupo_cierre','expresion',6,'p_declaracion_tipo_registro','parser.py',214),
  ('grupo_apertura -> opt_newline LLE opt_newline','grupo_apertura',3,'p_grupo_apertura','parser.py',226),
  ('grupo_cierre -> opt_newline LLA opt_newline','grupo_cierre',3,'p_grupo_cierre','parser.py',230),
  ('opt_newline -> NEWLINE','opt_newline',1,'p_opt_newline','parser.py',234),
  ('opt_newline -> <empty>','opt_newline',0,'p_opt_newline','parser.py',235),
  ('bloque_propiedades -> propiedad','bloque_propiedades',1,'p_bloque_propiedades','parser.py',239),
  ('bloque_propiedades -> propiedad NEWLINE','bloque_propiedades',2,'p_bloque_propiedades','parser.py',240),
  ('bloque_propiedades -> propiedad NEWLINE bloque_propiedades','bloque_propiedades',3,'p_bloque_propiedades','parser.py',241),
  ('bloque_propiedades -> propiedad bloque_propiedades','bloque_propiedades',2,'p_bloque_propiedades','parser.py',242),
  ('bloque_propiedades -> NEWLINE bloque_propiedades','bloque_propiedades',2,'p_bloque_propiedades','parser.py',243),
  ('propiedad -> tipo lista_ids','propiedad',2,'p_propiedad','parser.py',265),
  ('lista_ids -> ID','lista_ids',1,'p_lista_ids','parser.py',270),
  ('lista_ids -> ID COMA lista_ids','lista_ids',3,'p_lista_ids','parser.py',271),
  ('expresion -> ids','expresion',1,'p_declaracion_registro','parser.py',278),
  ('ids -> ID ID','ids',2,'p_ids','parser.py',282),
  ('expresion -> ID PNTO ID','expresion',3,'p_expresion_acceso_registro','parser.py',314),
  ('expresion -> tipo lista_ids','expresion',2,'p_expresion_propiedad','parser.py',330),
  ('expresion -> ID PNTO ID EQ expresion','expresion',5,'p_asignacion_propiedad_registro','parser.py',337),
  ('expresion -> IF expresion bloque','expresion',3,'p_expresion_if_simple','parser.py',363),
  ('expresion -> IF expresion bloque ELSE bloque','expresion',5,'p_expresion_if_else','parser.py',382),
  ('expresion -> WHILE expresion bloque','expresion',3,'p_expresion_while','parser.py',398),
  ('bloque -> grupo_apertura expresiones grupo_cierre','bloque',3,'p_bloque_llaves','parser.py',406),
  ('expresiones -> expresion','expresiones',1,'p_expresiones','parser.py',411),
  ('expresiones -> expresion NEWLINE','expresiones',2,'p_expresiones','parser.py',412),
  ('expresiones -> expresion NEWLINE expresiones','expresiones',3,'p_expresiones','parser.py',413),
  ('tipo_base -> INT','tipo_base',1,'p_tipo_base','parser.py',426),
  ('tipo_base -> FLOAT','tipo_base',1,'p_tipo_base','parser.py',427),
  ('tipo_base -> BOOL','tipo_base',1,'p_tipo_base','parser.py',428),
  ('tipo_base -> CHAR','tipo_base',1,'p_tipo_base','parser.py',429),
  ('tipo -> tipo_base','tipo',1,'p_tipo','parser.py',435),
  ('tipo -> tipo_base CE ENTERO CA','tipo',4,'p_tipo','parser.py',436),
  ('expresion -> expresion OR expresion_logica','expresion',3,'p_expresion','parser.py',446),
  ('expresion -> expresion_logica','expresion',1,'p_expresion','parser.py',447),
  ('expresion_logica -> expresion_logica AND expresion_relacional','expresion_logica',3,'p_expresion_logica','parser.py',454),
  ('expresion_logica -> expresion_relacional','expresion_logica',1,'p_expresion_logica','parser.py',455),
  ('expresion_relacional -> termino_aritmetico I termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',462),
  ('expresion_relacional -> termino_aritmetico M termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',463),
  ('expresion_relacional -> termino_aritmetico m termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',464),
  ('expresion_relacional -> termino_aritmetico MI termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',465),
  ('expresion_relacional -> termino_aritmetico mI termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',466),
  ('expresion_relacional -> termino_aritmetico','expresion_relacional',1,'p_expresion_relacional','parser.py',467),
  ('termino_aritmetico -> termino_aritmetico SUM factor','termino_aritmetico',3,'p_termino_aritmetico','parser.py',478),
  ('termino_aritmetico -> termino_aritmetico RES factor','termino_aritmetico',3,'p_termino_aritmetico','parser.py',479),
  ('termino_aritmetico -> factor','termino_aritmetico',1,'p_termino_aritmetico','parser.py',480),
  ('factor -> factor MUL elemento','factor',3,'p_factor','parser.py',490),
  ('factor -> factor DIV elemento','factor',3,'p_factor','parser.py',491),
  ('factor -> elemento','factor',1,'p_factor','parser.py',492),
  ('booleano -> TRUE','booleano',1,'p_booleano','parser.py',506),
  ('booleano -> FALSE','booleano',1,'p_booleano','parser.py',507),
  ('elemento -> ENTERO','elemento',1,'p_elemento','parser.py',511),
  ('elemento -> REAL','elemento',1,'p_elemento','parser.py',512),
  ('elemento -> booleano','elemento',1,'p_elemento','parser.py',513),
  ('elemento -> CARACTER','elemento',1,'p_elemento','parser.py',514),
  ('elemento -> ID','elemento',1,'p_elemento','parser.py',515),
  ('elemento -> PE expresion PA','elemento',3,'p_elemento','parser.py',516),
  ('elemento -> RES elemento','elemento',2,'p_elemento','parser.py',517),
  ('elemento -> NOT elemento','elemento',2,'p_elemento','parser.py',518),
  ('elemento -> SEN PE expresion PA','elemento',4,'p_elemento','parser.py',519),
  ('elemento -> COS PE expresion PA','elemento',4,'p_elemento','parser.py',520),
  ('elemento -> EXP PE expresion PA','elemento',4,'p_elemento','parser.py',521),
  ('elemento -> LOG PE expresion PA','elemento',4,'p_elemento','parser.py',522),
]

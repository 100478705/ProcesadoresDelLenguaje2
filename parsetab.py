
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaleftORleftANDleftIMmMImIleftSUMRESleftMULDIVrightUMINUSrightNOTAND BOOL CARACTER CE CHAR COS CS DEF DIV ELSE ENTERO_BINARIO ENTERO_DECIMAL ENTERO_HEXADECIMAL ENTERO_OCTAL EQ EXP FALSE FLOAT I ID IF INT LLE LLS LOG M MI MUL NEWLINE NOT OR PE PS REAL_CIENTIFICO REAL_DECIMAL RES RETURN SEN SUM TRUE TYPE WHILE m mIprograma : linea programa\n                    | linea : expresion NEWLINE\n                | NEWLINEexpresion : tipo ID EQ expresionexpresion : ID EQ expresiontipo : INT\n               | FLOAT\n               | BOOL\n               | CHARexpresion : expresion OR expresion_logica\n                    | expresion_logicaexpresion_logica : expresion_logica AND expresion_relacional\n                           | expresion_relacionalexpresion_relacional : termino_aritmetico I termino_aritmetico\n                               | termino_aritmetico M termino_aritmetico\n                               | termino_aritmetico m termino_aritmetico\n                               | termino_aritmetico MI termino_aritmetico\n                               | termino_aritmetico mI termino_aritmetico\n                               | termino_aritmeticotermino_aritmetico : termino_aritmetico SUM factor\n                             | termino_aritmetico RES factor\n                             | factorfactor : factor MUL elemento\n                 | factor DIV elemento\n                 | elementobooleano : TRUE\n                    | FALSEelemento : ENTERO_DECIMAL\n                | ENTERO_BINARIO\n                | ENTERO_OCTAL\n                | ENTERO_HEXADECIMAL\n                | REAL_DECIMAL\n                | REAL_CIENTIFICO\n                | booleano\n                | CARACTER\n                | ID\n                | PE expresion PS\n                | RES elemento %prec UMINUS\n                | NOT elemento\n                | SEN PE expresion PS\n                | COS PE expresion PS\n                | EXP PE expresion PS\n                | LOG PE expresion PS'
    
_lr_action_items = {'$end':([0,1,2,4,33,34,],[-2,0,-2,-4,-1,-3,]),'NEWLINE':([0,2,3,4,6,7,12,13,14,16,17,18,19,20,21,22,23,24,31,32,34,48,49,51,56,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,78,],[4,4,34,-4,-37,-12,-14,-20,-23,-26,-29,-30,-31,-32,-33,-34,-35,-36,-27,-28,-3,-39,-37,-40,-11,-6,-13,-15,-16,-17,-18,-19,-21,-22,-24,-25,-38,-5,-41,-42,-43,-44,]),'ID':([0,2,4,5,8,9,10,11,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[6,6,-4,36,-7,-8,-9,-10,49,6,49,-3,49,6,49,49,49,49,49,49,49,49,49,49,6,6,6,6,6,]),'INT':([0,2,4,25,34,37,52,53,54,55,57,],[8,8,-4,8,-3,8,8,8,8,8,8,]),'FLOAT':([0,2,4,25,34,37,52,53,54,55,57,],[9,9,-4,9,-3,9,9,9,9,9,9,]),'BOOL':([0,2,4,25,34,37,52,53,54,55,57,],[10,10,-4,10,-3,10,10,10,10,10,10,]),'CHAR':([0,2,4,25,34,37,52,53,54,55,57,],[11,11,-4,11,-3,11,11,11,11,11,11,]),'ENTERO_DECIMAL':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[17,17,-4,17,17,17,-3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'ENTERO_BINARIO':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[18,18,-4,18,18,18,-3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ENTERO_OCTAL':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[19,19,-4,19,19,19,-3,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'ENTERO_HEXADECIMAL':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[20,20,-4,20,20,20,-3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'REAL_DECIMAL':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[21,21,-4,21,21,21,-3,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'REAL_CIENTIFICO':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[22,22,-4,22,22,22,-3,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'CARACTER':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[24,24,-4,24,24,24,-3,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'PE':([0,2,4,15,25,26,27,28,29,30,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[25,25,-4,25,25,25,52,53,54,55,-3,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'RES':([0,2,4,6,13,14,15,16,17,18,19,20,21,22,23,24,25,26,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,57,60,61,62,63,64,65,66,67,68,69,75,76,77,78,],[15,15,-4,-37,45,-23,15,-26,-29,-30,-31,-32,-33,-34,-35,-36,15,15,-27,-28,-3,15,15,15,15,15,15,15,15,15,15,15,15,-39,-37,-40,15,15,15,15,15,45,45,45,45,45,-21,-22,-24,-25,-38,-41,-42,-43,-44,]),'NOT':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[26,26,-4,26,26,26,-3,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'SEN':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[27,27,-4,27,27,27,-3,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'COS':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[28,28,-4,28,28,28,-3,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'EXP':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[29,29,-4,29,29,29,-3,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'LOG':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[30,30,-4,30,30,30,-3,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'TRUE':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[31,31,-4,31,31,31,-3,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'FALSE':([0,2,4,15,25,26,34,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[32,32,-4,32,32,32,-3,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'OR':([3,6,7,12,13,14,16,17,18,19,20,21,22,23,24,31,32,48,49,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[35,-37,-12,-14,-20,-23,-26,-29,-30,-31,-32,-33,-34,-35,-36,-27,-28,-39,-37,35,-40,-11,35,-13,-15,-16,-17,-18,-19,-21,-22,-24,-25,-38,35,35,35,35,35,-41,-42,-43,-44,]),'EQ':([6,36,],[37,57,]),'MUL':([6,14,16,17,18,19,20,21,22,23,24,31,32,48,49,51,65,66,67,68,69,75,76,77,78,],[-37,46,-26,-29,-30,-31,-32,-33,-34,-35,-36,-27,-28,-39,-37,-40,46,46,-24,-25,-38,-41,-42,-43,-44,]),'DIV':([6,14,16,17,18,19,20,21,22,23,24,31,32,48,49,51,65,66,67,68,69,75,76,77,78,],[-37,47,-26,-29,-30,-31,-32,-33,-34,-35,-36,-27,-28,-39,-37,-40,47,47,-24,-25,-38,-41,-42,-43,-44,]),'I':([6,13,14,16,17,18,19,20,21,22,23,24,31,32,48,49,51,65,66,67,68,69,75,76,77,78,],[-37,39,-23,-26,-29,-30,-31,-32,-33,-34,-35,-36,-27,-28,-39,-37,-40,-21,-22,-24,-25,-38,-41,-42,-43,-44,]),'M':([6,13,14,16,17,18,19,20,21,22,23,24,31,32,48,49,51,65,66,67,68,69,75,76,77,78,],[-37,40,-23,-26,-29,-30,-31,-32,-33,-34,-35,-36,-27,-28,-39,-37,-40,-21,-22,-24,-25,-38,-41,-42,-43,-44,]),'m':([6,13,14,16,17,18,19,20,21,22,23,24,31,32,48,49,51,65,66,67,68,69,75,76,77,78,],[-37,41,-23,-26,-29,-30,-31,-32,-33,-34,-35,-36,-27,-28,-39,-37,-40,-21,-22,-24,-25,-38,-41,-42,-43,-44,]),'MI':([6,13,14,16,17,18,19,20,21,22,23,24,31,32,48,49,51,65,66,67,68,69,75,76,77,78,],[-37,42,-23,-26,-29,-30,-31,-32,-33,-34,-35,-36,-27,-28,-39,-37,-40,-21,-22,-24,-25,-38,-41,-42,-43,-44,]),'mI':([6,13,14,16,17,18,19,20,21,22,23,24,31,32,48,49,51,65,66,67,68,69,75,76,77,78,],[-37,43,-23,-26,-29,-30,-31,-32,-33,-34,-35,-36,-27,-28,-39,-37,-40,-21,-22,-24,-25,-38,-41,-42,-43,-44,]),'SUM':([6,13,14,16,17,18,19,20,21,22,23,24,31,32,48,49,51,60,61,62,63,64,65,66,67,68,69,75,76,77,78,],[-37,44,-23,-26,-29,-30,-31,-32,-33,-34,-35,-36,-27,-28,-39,-37,-40,44,44,44,44,44,-21,-22,-24,-25,-38,-41,-42,-43,-44,]),'AND':([6,7,12,13,14,16,17,18,19,20,21,22,23,24,31,32,48,49,51,56,59,60,61,62,63,64,65,66,67,68,69,75,76,77,78,],[-37,38,-14,-20,-23,-26,-29,-30,-31,-32,-33,-34,-35,-36,-27,-28,-39,-37,-40,38,-13,-15,-16,-17,-18,-19,-21,-22,-24,-25,-38,-41,-42,-43,-44,]),'PS':([6,7,12,13,14,16,17,18,19,20,21,22,23,24,31,32,48,49,50,51,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[-37,-12,-14,-20,-23,-26,-29,-30,-31,-32,-33,-34,-35,-36,-27,-28,-39,-37,69,-40,-11,-6,-13,-15,-16,-17,-18,-19,-21,-22,-24,-25,-38,75,76,77,78,-5,-41,-42,-43,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,2,],[1,33,]),'linea':([0,2,],[2,2,]),'expresion':([0,2,25,37,52,53,54,55,57,],[3,3,50,58,70,71,72,73,74,]),'tipo':([0,2,25,37,52,53,54,55,57,],[5,5,5,5,5,5,5,5,5,]),'expresion_logica':([0,2,25,35,37,52,53,54,55,57,],[7,7,7,56,7,7,7,7,7,7,]),'expresion_relacional':([0,2,25,35,37,38,52,53,54,55,57,],[12,12,12,12,12,59,12,12,12,12,12,]),'termino_aritmetico':([0,2,25,35,37,38,39,40,41,42,43,52,53,54,55,57,],[13,13,13,13,13,13,60,61,62,63,64,13,13,13,13,13,]),'factor':([0,2,25,35,37,38,39,40,41,42,43,44,45,52,53,54,55,57,],[14,14,14,14,14,14,14,14,14,14,14,65,66,14,14,14,14,14,]),'elemento':([0,2,15,25,26,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[16,16,48,16,51,16,16,16,16,16,16,16,16,16,16,67,68,16,16,16,16,16,]),'booleano':([0,2,15,25,26,35,37,38,39,40,41,42,43,44,45,46,47,52,53,54,55,57,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> linea programa','programa',2,'p_programa','parser.py',36),
  ('programa -> <empty>','programa',0,'p_programa','parser.py',37),
  ('linea -> expresion NEWLINE','linea',2,'p_linea','parser.py',41),
  ('linea -> NEWLINE','linea',1,'p_linea','parser.py',42),
  ('expresion -> tipo ID EQ expresion','expresion',4,'p_declaracion_variable','parser.py',48),
  ('expresion -> ID EQ expresion','expresion',3,'p_asignacion_variable','parser.py',63),
  ('tipo -> INT','tipo',1,'p_tipo','parser.py',74),
  ('tipo -> FLOAT','tipo',1,'p_tipo','parser.py',75),
  ('tipo -> BOOL','tipo',1,'p_tipo','parser.py',76),
  ('tipo -> CHAR','tipo',1,'p_tipo','parser.py',77),
  ('expresion -> expresion OR expresion_logica','expresion',3,'p_expresion','parser.py',81),
  ('expresion -> expresion_logica','expresion',1,'p_expresion','parser.py',82),
  ('expresion_logica -> expresion_logica AND expresion_relacional','expresion_logica',3,'p_expresion_logica','parser.py',89),
  ('expresion_logica -> expresion_relacional','expresion_logica',1,'p_expresion_logica','parser.py',90),
  ('expresion_relacional -> termino_aritmetico I termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',97),
  ('expresion_relacional -> termino_aritmetico M termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',98),
  ('expresion_relacional -> termino_aritmetico m termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',99),
  ('expresion_relacional -> termino_aritmetico MI termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',100),
  ('expresion_relacional -> termino_aritmetico mI termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',101),
  ('expresion_relacional -> termino_aritmetico','expresion_relacional',1,'p_expresion_relacional','parser.py',102),
  ('termino_aritmetico -> termino_aritmetico SUM factor','termino_aritmetico',3,'p_termino_aritmetico','parser.py',113),
  ('termino_aritmetico -> termino_aritmetico RES factor','termino_aritmetico',3,'p_termino_aritmetico','parser.py',114),
  ('termino_aritmetico -> factor','termino_aritmetico',1,'p_termino_aritmetico','parser.py',115),
  ('factor -> factor MUL elemento','factor',3,'p_factor','parser.py',123),
  ('factor -> factor DIV elemento','factor',3,'p_factor','parser.py',124),
  ('factor -> elemento','factor',1,'p_factor','parser.py',125),
  ('booleano -> TRUE','booleano',1,'p_booleano','parser.py',138),
  ('booleano -> FALSE','booleano',1,'p_booleano','parser.py',139),
  ('elemento -> ENTERO_DECIMAL','elemento',1,'p_elemento','parser.py',143),
  ('elemento -> ENTERO_BINARIO','elemento',1,'p_elemento','parser.py',144),
  ('elemento -> ENTERO_OCTAL','elemento',1,'p_elemento','parser.py',145),
  ('elemento -> ENTERO_HEXADECIMAL','elemento',1,'p_elemento','parser.py',146),
  ('elemento -> REAL_DECIMAL','elemento',1,'p_elemento','parser.py',147),
  ('elemento -> REAL_CIENTIFICO','elemento',1,'p_elemento','parser.py',148),
  ('elemento -> booleano','elemento',1,'p_elemento','parser.py',149),
  ('elemento -> CARACTER','elemento',1,'p_elemento','parser.py',150),
  ('elemento -> ID','elemento',1,'p_elemento','parser.py',151),
  ('elemento -> PE expresion PS','elemento',3,'p_elemento','parser.py',152),
  ('elemento -> RES elemento','elemento',2,'p_elemento','parser.py',153),
  ('elemento -> NOT elemento','elemento',2,'p_elemento','parser.py',154),
  ('elemento -> SEN PE expresion PS','elemento',4,'p_elemento','parser.py',155),
  ('elemento -> COS PE expresion PS','elemento',4,'p_elemento','parser.py',156),
  ('elemento -> EXP PE expresion PS','elemento',4,'p_elemento','parser.py',157),
  ('elemento -> LOG PE expresion PS','elemento',4,'p_elemento','parser.py',158),
]

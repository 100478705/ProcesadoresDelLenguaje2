
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaleftORleftANDleftIMmMImIleftSUMRESleftMULDIVrightUMINUSrightNOTAND BOOL CARACTER CE CHAR COMA COS CS DEF DIV DPNTO ELSE ENTERO_BINARIO ENTERO_DECIMAL ENTERO_HEXADECIMAL ENTERO_OCTAL EQ EXP FALSE FLOAT I ID IF INT LEN LLE LLS LOG M MI MUL NEWLINE NOT OR PE PNTO PS REAL_CIENTIFICO REAL_DECIMAL RES RETURN SEN SUM TAB TRUE TYPE WHILE m mIprograma : linea programa\n| linea : expresion NEWLINE\n| NEWLINEexpresion : tipo lista_declaracioneslista_declaraciones : declaracion\n| declaracion COMA lista_declaracionesdeclaracion : ID\n| ID EQ expresion\n| ID CE ENTERO_DECIMAL CSexpresion : ID PNTO LENelemento : ID CE ENTERO_DECIMAL CSexpresion : ID CE ENTERO_DECIMAL CS EQ expresionexpresion : ID EQ expresionexpresion : TYPE ID DPNTO NEWLINE bloque_propiedadesbloque_propiedades : propiedad\n| propiedad bloque_propiedadespropiedad : TAB tipo lista_ids NEWLINElista_ids : ID\n| ID COMA lista_idsexpresion : ID IDexpresion : ID PNTO IDexpresion : ID PNTO ID EQ expresionexpresion : IF expresion DPNTO NEWLINE bloque_tabuladoexpresion : IF expresion DPNTO NEWLINE bloque_tabulado ELSE DPNTO NEWLINE bloque_tabuladobloque_tabulado : linea_tabulada\n| linea_tabulada bloque_tabuladolinea_tabulada : TAB expresion NEWLINEtipo : INT\n| FLOAT\n| BOOL\n| CHARexpresion : expresion OR expresion_logica\n| expresion_logicaexpresion_logica : expresion_logica AND expresion_relacional\n| expresion_relacionalexpresion_relacional : termino_aritmetico I termino_aritmetico\n| termino_aritmetico M termino_aritmetico\n| termino_aritmetico m termino_aritmetico\n| termino_aritmetico MI termino_aritmetico\n| termino_aritmetico mI termino_aritmetico\n| termino_aritmeticotermino_aritmetico : termino_aritmetico SUM factor\n| termino_aritmetico RES factor\n| factorfactor : factor MUL elemento\n| factor DIV elemento\n| elementobooleano : TRUE\n| FALSEelemento : ENTERO_DECIMAL\n| ENTERO_BINARIO\n| ENTERO_OCTAL\n| ENTERO_HEXADECIMAL\n| REAL_DECIMAL\n| REAL_CIENTIFICO\n| booleano\n| CARACTER\n| ID\n| PE expresion PS\n| RES elemento %prec UMINUS\n| NOT elemento\n| SEN PE expresion PS\n| COS PE expresion PS\n| EXP PE expresion PS\n| LOG PE expresion PS'
    
_lr_action_items = {'$end':([0,1,2,4,35,36,],[-2,0,-2,-4,-1,-3,]),'NEWLINE':([0,2,3,4,6,7,10,15,16,17,19,20,21,22,23,24,25,26,33,34,36,38,39,40,41,57,58,60,65,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,86,91,92,95,99,100,101,102,103,104,106,107,109,110,112,113,114,117,118,119,120,121,122,123,126,127,],[4,4,36,-4,-59,-51,-34,-36,-42,-45,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-3,-5,-6,-8,-21,-61,-59,-62,-33,-22,-11,-14,96,97,-35,-37,-38,-39,-40,-41,-43,-44,-46,-47,-60,-7,-9,-12,-63,-64,-65,-66,-10,-23,-15,-16,-24,-26,-12,-13,-17,-27,122,123,-19,125,-28,-18,-20,-25,]),'ID':([0,2,4,5,6,8,9,11,12,13,14,18,27,28,36,37,42,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,66,67,94,105,111,115,124,],[6,6,-4,40,41,45,6,-29,-30,-31,-32,58,6,58,-3,58,69,6,58,58,58,58,58,58,58,58,58,58,6,6,6,6,40,6,6,6,6,120,120,]),'TYPE':([0,2,4,9,27,36,44,61,62,63,64,67,94,105,111,],[8,8,-4,8,8,-3,8,8,8,8,8,8,8,8,8,]),'IF':([0,2,4,9,27,36,44,61,62,63,64,67,94,105,111,],[9,9,-4,9,9,-3,9,9,9,9,9,9,9,9,9,]),'INT':([0,2,4,9,27,36,44,61,62,63,64,67,94,105,108,111,],[11,11,-4,11,11,-3,11,11,11,11,11,11,11,11,11,11,]),'FLOAT':([0,2,4,9,27,36,44,61,62,63,64,67,94,105,108,111,],[12,12,-4,12,12,-3,12,12,12,12,12,12,12,12,12,12,]),'BOOL':([0,2,4,9,27,36,44,61,62,63,64,67,94,105,108,111,],[13,13,-4,13,13,-3,13,13,13,13,13,13,13,13,13,13,]),'CHAR':([0,2,4,9,27,36,44,61,62,63,64,67,94,105,108,111,],[14,14,-4,14,14,-3,14,14,14,14,14,14,14,14,14,14,]),'ENTERO_DECIMAL':([0,2,4,9,18,27,28,36,37,43,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,68,85,94,105,111,],[7,7,-4,7,7,7,7,-3,7,71,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,93,98,7,7,7,]),'ENTERO_BINARIO':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[20,20,-4,20,20,20,20,-3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'ENTERO_OCTAL':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[21,21,-4,21,21,21,21,-3,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'ENTERO_HEXADECIMAL':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[22,22,-4,22,22,22,22,-3,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'REAL_DECIMAL':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[23,23,-4,23,23,23,23,-3,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'REAL_CIENTIFICO':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[24,24,-4,24,24,24,24,-3,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'CARACTER':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[26,26,-4,26,26,26,26,-3,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'PE':([0,2,4,9,18,27,28,29,30,31,32,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[27,27,-4,27,27,27,27,61,62,63,64,-3,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'RES':([0,2,4,6,7,9,16,17,18,19,20,21,22,23,24,25,26,27,28,33,34,36,37,44,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,67,76,77,78,79,80,81,82,83,84,86,94,95,99,100,101,102,105,111,112,],[18,18,-4,-59,-51,18,54,-45,18,-48,-52,-53,-54,-55,-56,-57,-58,18,18,-49,-50,-3,18,18,18,18,18,18,18,18,18,18,18,18,-61,-59,-62,18,18,18,18,18,54,54,54,54,54,-43,-44,-46,-47,-60,18,-12,-63,-64,-65,-66,18,18,-12,]),'NOT':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[28,28,-4,28,28,28,28,-3,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'SEN':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[29,29,-4,29,29,29,29,-3,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'COS':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[30,30,-4,30,30,30,30,-3,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'EXP':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[31,31,-4,31,31,31,31,-3,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'LOG':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[32,32,-4,32,32,32,32,-3,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'TRUE':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[33,33,-4,33,33,33,33,-3,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'FALSE':([0,2,4,9,18,27,28,36,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[34,34,-4,34,34,34,34,-3,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'OR':([3,6,7,10,15,16,17,19,20,21,22,23,24,25,26,33,34,38,39,40,41,46,57,58,59,60,65,69,70,72,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,95,99,100,101,102,103,104,106,107,109,110,112,113,114,117,118,122,123,127,],[37,-59,-51,-34,-36,-42,-45,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-5,-6,-8,-21,37,-61,-59,37,-62,-33,-22,-11,37,-35,-37,-38,-39,-40,-41,-43,-44,-46,-47,-60,37,37,37,37,-7,37,-12,-63,-64,-65,-66,-10,37,-15,-16,-24,-26,-12,37,-17,-27,37,-28,-18,-25,]),'PNTO':([6,],[42,]),'CE':([6,40,58,],[43,68,85,]),'EQ':([6,40,69,95,],[44,67,94,105,]),'MUL':([6,7,17,19,20,21,22,23,24,25,26,33,34,57,58,60,81,82,83,84,86,95,99,100,101,102,112,],[-59,-51,55,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-61,-59,-62,55,55,-46,-47,-60,-12,-63,-64,-65,-66,-12,]),'DIV':([6,7,17,19,20,21,22,23,24,25,26,33,34,57,58,60,81,82,83,84,86,95,99,100,101,102,112,],[-59,-51,56,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-61,-59,-62,56,56,-46,-47,-60,-12,-63,-64,-65,-66,-12,]),'I':([6,7,16,17,19,20,21,22,23,24,25,26,33,34,57,58,60,81,82,83,84,86,95,99,100,101,102,112,],[-59,-51,48,-45,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-61,-59,-62,-43,-44,-46,-47,-60,-12,-63,-64,-65,-66,-12,]),'M':([6,7,16,17,19,20,21,22,23,24,25,26,33,34,57,58,60,81,82,83,84,86,95,99,100,101,102,112,],[-59,-51,49,-45,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-61,-59,-62,-43,-44,-46,-47,-60,-12,-63,-64,-65,-66,-12,]),'m':([6,7,16,17,19,20,21,22,23,24,25,26,33,34,57,58,60,81,82,83,84,86,95,99,100,101,102,112,],[-59,-51,50,-45,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-61,-59,-62,-43,-44,-46,-47,-60,-12,-63,-64,-65,-66,-12,]),'MI':([6,7,16,17,19,20,21,22,23,24,25,26,33,34,57,58,60,81,82,83,84,86,95,99,100,101,102,112,],[-59,-51,51,-45,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-61,-59,-62,-43,-44,-46,-47,-60,-12,-63,-64,-65,-66,-12,]),'mI':([6,7,16,17,19,20,21,22,23,24,25,26,33,34,57,58,60,81,82,83,84,86,95,99,100,101,102,112,],[-59,-51,52,-45,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-61,-59,-62,-43,-44,-46,-47,-60,-12,-63,-64,-65,-66,-12,]),'SUM':([6,7,16,17,19,20,21,22,23,24,25,26,33,34,57,58,60,76,77,78,79,80,81,82,83,84,86,95,99,100,101,102,112,],[-59,-51,53,-45,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-61,-59,-62,53,53,53,53,53,-43,-44,-46,-47,-60,-12,-63,-64,-65,-66,-12,]),'AND':([6,7,10,15,16,17,19,20,21,22,23,24,25,26,33,34,57,58,60,65,75,76,77,78,79,80,81,82,83,84,86,95,99,100,101,102,112,],[-59,-51,47,-36,-42,-45,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-61,-59,-62,47,-35,-37,-38,-39,-40,-41,-43,-44,-46,-47,-60,-12,-63,-64,-65,-66,-12,]),'DPNTO':([6,7,10,15,16,17,19,20,21,22,23,24,25,26,33,34,38,39,40,41,45,46,57,58,60,65,69,70,72,75,76,77,78,79,80,81,82,83,84,86,91,92,95,99,100,101,102,103,104,106,107,109,110,112,113,114,116,117,122,123,127,],[-59,-51,-34,-36,-42,-45,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-5,-6,-8,-21,73,74,-61,-59,-62,-33,-22,-11,-14,-35,-37,-38,-39,-40,-41,-43,-44,-46,-47,-60,-7,-9,-12,-63,-64,-65,-66,-10,-23,-15,-16,-24,-26,-12,-13,-17,121,-27,-28,-18,-25,]),'PS':([6,7,10,15,16,17,19,20,21,22,23,24,25,26,33,34,38,39,40,41,57,58,59,60,65,69,70,72,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,95,99,100,101,102,103,104,106,107,109,110,112,113,114,117,122,123,127,],[-59,-51,-34,-36,-42,-45,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-5,-6,-8,-21,-61,-59,86,-62,-33,-22,-11,-14,-35,-37,-38,-39,-40,-41,-43,-44,-46,-47,-60,99,100,101,102,-7,-9,-12,-63,-64,-65,-66,-10,-23,-15,-16,-24,-26,-12,-13,-17,-27,-28,-18,-25,]),'COMA':([6,7,10,15,16,17,19,20,21,22,23,24,25,26,33,34,38,39,40,41,57,58,60,65,69,70,72,75,76,77,78,79,80,81,82,83,84,86,91,92,95,99,100,101,102,103,104,106,107,109,110,112,113,114,117,120,122,123,127,],[-59,-51,-34,-36,-42,-45,-48,-52,-53,-54,-55,-56,-57,-58,-49,-50,-5,66,-8,-21,-61,-59,-62,-33,-22,-11,-14,-35,-37,-38,-39,-40,-41,-43,-44,-46,-47,-60,-7,-9,-12,-63,-64,-65,-66,-10,-23,-15,-16,-24,-26,-12,-13,-17,-27,124,-28,-18,-25,]),'LEN':([42,],[70,]),'CS':([71,93,98,],[95,103,112,]),'TAB':([96,97,107,110,122,123,125,],[108,111,108,111,-28,-18,111,]),'ELSE':([109,110,117,122,],[116,-26,-27,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,2,],[1,35,]),'linea':([0,2,],[2,2,]),'expresion':([0,2,9,27,44,61,62,63,64,67,94,105,111,],[3,3,46,59,72,87,88,89,90,92,104,113,118,]),'tipo':([0,2,9,27,44,61,62,63,64,67,94,105,108,111,],[5,5,5,5,5,5,5,5,5,5,5,5,115,5,]),'expresion_logica':([0,2,9,27,37,44,61,62,63,64,67,94,105,111,],[10,10,10,10,65,10,10,10,10,10,10,10,10,10,]),'expresion_relacional':([0,2,9,27,37,44,47,61,62,63,64,67,94,105,111,],[15,15,15,15,15,15,75,15,15,15,15,15,15,15,15,]),'termino_aritmetico':([0,2,9,27,37,44,47,48,49,50,51,52,61,62,63,64,67,94,105,111,],[16,16,16,16,16,16,16,76,77,78,79,80,16,16,16,16,16,16,16,16,]),'factor':([0,2,9,27,37,44,47,48,49,50,51,52,53,54,61,62,63,64,67,94,105,111,],[17,17,17,17,17,17,17,17,17,17,17,17,81,82,17,17,17,17,17,17,17,17,]),'elemento':([0,2,9,18,27,28,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[19,19,19,57,19,60,19,19,19,19,19,19,19,19,19,19,83,84,19,19,19,19,19,19,19,19,]),'booleano':([0,2,9,18,27,28,37,44,47,48,49,50,51,52,53,54,55,56,61,62,63,64,67,94,105,111,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'lista_declaraciones':([5,66,],[38,91,]),'declaracion':([5,66,],[39,39,]),'bloque_propiedades':([96,107,],[106,114,]),'propiedad':([96,107,],[107,107,]),'bloque_tabulado':([97,110,125,],[109,117,127,]),'linea_tabulada':([97,110,125,],[110,110,110,]),'lista_ids':([115,124,],[119,126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> linea programa','programa',2,'p_programa','parser.py',37),
  ('programa -> <empty>','programa',0,'p_programa','parser.py',38),
  ('linea -> expresion NEWLINE','linea',2,'p_linea','parser.py',42),
  ('linea -> NEWLINE','linea',1,'p_linea','parser.py',43),
  ('expresion -> tipo lista_declaraciones','expresion',2,'p_declaracion_variable','parser.py',49),
  ('lista_declaraciones -> declaracion','lista_declaraciones',1,'p_lista_declaraciones','parser.py',106),
  ('lista_declaraciones -> declaracion COMA lista_declaraciones','lista_declaraciones',3,'p_lista_declaraciones','parser.py',107),
  ('declaracion -> ID','declaracion',1,'p_declaracion','parser.py',115),
  ('declaracion -> ID EQ expresion','declaracion',3,'p_declaracion','parser.py',116),
  ('declaracion -> ID CE ENTERO_DECIMAL CS','declaracion',4,'p_declaracion','parser.py',117),
  ('expresion -> ID PNTO LEN','expresion',3,'p_expresion_vector_len','parser.py',133),
  ('elemento -> ID CE ENTERO_DECIMAL CS','elemento',4,'p_elemento_acceso_vector','parser.py',143),
  ('expresion -> ID CE ENTERO_DECIMAL CS EQ expresion','expresion',6,'p_asignacion_vector_elemento','parser.py',160),
  ('expresion -> ID EQ expresion','expresion',3,'p_asignacion_variable','parser.py',177),
  ('expresion -> TYPE ID DPNTO NEWLINE bloque_propiedades','expresion',5,'p_declaracion_tipo_registro','parser.py',212),
  ('bloque_propiedades -> propiedad','bloque_propiedades',1,'p_bloque_propiedades','parser.py',224),
  ('bloque_propiedades -> propiedad bloque_propiedades','bloque_propiedades',2,'p_bloque_propiedades','parser.py',225),
  ('propiedad -> TAB tipo lista_ids NEWLINE','propiedad',4,'p_propiedad','parser.py',233),
  ('lista_ids -> ID','lista_ids',1,'p_lista_ids','parser.py',242),
  ('lista_ids -> ID COMA lista_ids','lista_ids',3,'p_lista_ids','parser.py',243),
  ('expresion -> ID ID','expresion',2,'p_declaracion_registro','parser.py',252),
  ('expresion -> ID PNTO ID','expresion',3,'p_expresion_acceso_registro','parser.py',284),
  ('expresion -> ID PNTO ID EQ expresion','expresion',5,'p_asignacion_propiedad_registro','parser.py',302),
  ('expresion -> IF expresion DPNTO NEWLINE bloque_tabulado','expresion',5,'p_expresion_if_simple','parser.py',327),
  ('expresion -> IF expresion DPNTO NEWLINE bloque_tabulado ELSE DPNTO NEWLINE bloque_tabulado','expresion',9,'p_expresion_if_else','parser.py',338),
  ('bloque_tabulado -> linea_tabulada','bloque_tabulado',1,'p_bloque_tabulado','parser.py',350),
  ('bloque_tabulado -> linea_tabulada bloque_tabulado','bloque_tabulado',2,'p_bloque_tabulado','parser.py',351),
  ('linea_tabulada -> TAB expresion NEWLINE','linea_tabulada',3,'p_linea_tabulada','parser.py',358),
  ('tipo -> INT','tipo',1,'p_tipo','parser.py',369),
  ('tipo -> FLOAT','tipo',1,'p_tipo','parser.py',370),
  ('tipo -> BOOL','tipo',1,'p_tipo','parser.py',371),
  ('tipo -> CHAR','tipo',1,'p_tipo','parser.py',372),
  ('expresion -> expresion OR expresion_logica','expresion',3,'p_expresion','parser.py',376),
  ('expresion -> expresion_logica','expresion',1,'p_expresion','parser.py',377),
  ('expresion_logica -> expresion_logica AND expresion_relacional','expresion_logica',3,'p_expresion_logica','parser.py',384),
  ('expresion_logica -> expresion_relacional','expresion_logica',1,'p_expresion_logica','parser.py',385),
  ('expresion_relacional -> termino_aritmetico I termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',392),
  ('expresion_relacional -> termino_aritmetico M termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',393),
  ('expresion_relacional -> termino_aritmetico m termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',394),
  ('expresion_relacional -> termino_aritmetico MI termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',395),
  ('expresion_relacional -> termino_aritmetico mI termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',396),
  ('expresion_relacional -> termino_aritmetico','expresion_relacional',1,'p_expresion_relacional','parser.py',397),
  ('termino_aritmetico -> termino_aritmetico SUM factor','termino_aritmetico',3,'p_termino_aritmetico','parser.py',408),
  ('termino_aritmetico -> termino_aritmetico RES factor','termino_aritmetico',3,'p_termino_aritmetico','parser.py',409),
  ('termino_aritmetico -> factor','termino_aritmetico',1,'p_termino_aritmetico','parser.py',410),
  ('factor -> factor MUL elemento','factor',3,'p_factor','parser.py',420),
  ('factor -> factor DIV elemento','factor',3,'p_factor','parser.py',421),
  ('factor -> elemento','factor',1,'p_factor','parser.py',422),
  ('booleano -> TRUE','booleano',1,'p_booleano','parser.py',436),
  ('booleano -> FALSE','booleano',1,'p_booleano','parser.py',437),
  ('elemento -> ENTERO_DECIMAL','elemento',1,'p_elemento','parser.py',441),
  ('elemento -> ENTERO_BINARIO','elemento',1,'p_elemento','parser.py',442),
  ('elemento -> ENTERO_OCTAL','elemento',1,'p_elemento','parser.py',443),
  ('elemento -> ENTERO_HEXADECIMAL','elemento',1,'p_elemento','parser.py',444),
  ('elemento -> REAL_DECIMAL','elemento',1,'p_elemento','parser.py',445),
  ('elemento -> REAL_CIENTIFICO','elemento',1,'p_elemento','parser.py',446),
  ('elemento -> booleano','elemento',1,'p_elemento','parser.py',447),
  ('elemento -> CARACTER','elemento',1,'p_elemento','parser.py',448),
  ('elemento -> ID','elemento',1,'p_elemento','parser.py',449),
  ('elemento -> PE expresion PS','elemento',3,'p_elemento','parser.py',450),
  ('elemento -> RES elemento','elemento',2,'p_elemento','parser.py',451),
  ('elemento -> NOT elemento','elemento',2,'p_elemento','parser.py',452),
  ('elemento -> SEN PE expresion PS','elemento',4,'p_elemento','parser.py',453),
  ('elemento -> COS PE expresion PS','elemento',4,'p_elemento','parser.py',454),
  ('elemento -> EXP PE expresion PS','elemento',4,'p_elemento','parser.py',455),
  ('elemento -> LOG PE expresion PS','elemento',4,'p_elemento','parser.py',456),
]

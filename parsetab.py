
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaleftORleftANDleftIMmMImIleftSUMRESleftMULDIVrightUMINUSrightNOTAND BOOL CARACTER CE CHAR COMA COS CS DEF DIV DPNTO ELSE ENTERO_BINARIO ENTERO_DECIMAL ENTERO_HEXADECIMAL ENTERO_OCTAL EQ EXP FALSE FLOAT I ID IF INT LEN LLE LLS LOG M MI MUL NEWLINE NOT OR PE PNTO PS REAL_CIENTIFICO REAL_DECIMAL RES RETURN SEN SUM TAB TRUE TYPE WHILE m mIprograma : linea programa\n                    | linea : expresion NEWLINE\n                | NEWLINEexpresion : tipo lista_declaracioneslista_declaraciones : declaracion\n                            | declaracion COMA lista_declaracionesdeclaracion : ID\n                    | ID EQ expresion\n                    | ID CE ENTERO_DECIMAL CSexpresion : ID PNTO LENelemento : ID CE ENTERO_DECIMAL CSexpresion : ID CE ENTERO_DECIMAL CS EQ expresionexpresion : ID EQ expresionexpresion : IF expresion DPNTO NEWLINE bloque_tabuladoexpresion : IF expresion DPNTO NEWLINE bloque_tabulado ELSE DPNTO NEWLINE bloque_tabuladobloque_tabulado : linea_tabulada\n                        | linea_tabulada bloque_tabuladolinea_tabulada : TAB expresion NEWLINEtipo : INT\n               | FLOAT\n               | BOOL\n               | CHARexpresion : expresion OR expresion_logica\n                    | expresion_logicaexpresion_logica : expresion_logica AND expresion_relacional\n                           | expresion_relacionalexpresion_relacional : termino_aritmetico I termino_aritmetico\n                               | termino_aritmetico M termino_aritmetico\n                               | termino_aritmetico m termino_aritmetico\n                               | termino_aritmetico MI termino_aritmetico\n                               | termino_aritmetico mI termino_aritmetico\n                               | termino_aritmeticotermino_aritmetico : termino_aritmetico SUM factor\n                             | termino_aritmetico RES factor\n                             | factorfactor : factor MUL elemento\n                 | factor DIV elemento\n                 | elementobooleano : TRUE\n                    | FALSEelemento : ENTERO_DECIMAL\n                    | ENTERO_BINARIO\n                    | ENTERO_OCTAL\n                    | ENTERO_HEXADECIMAL\n                    | REAL_DECIMAL\n                    | REAL_CIENTIFICO\n                    | booleano\n                    | CARACTER\n                    | ID\n                    | PE expresion PS\n                    | RES elemento %prec UMINUS\n                    | NOT elemento\n                    | SEN PE expresion PS\n                    | COS PE expresion PS\n                    | EXP PE expresion PS\n                    | LOG PE expresion PS'
    
_lr_action_items = {'$end':([0,1,2,4,34,35,],[-2,0,-2,-4,-1,-3,]),'NEWLINE':([0,2,3,4,6,7,9,14,15,16,18,19,20,21,22,23,24,25,32,33,35,37,38,39,54,55,57,62,66,68,69,70,71,72,73,74,75,76,77,78,79,81,86,87,89,92,93,94,95,96,98,99,101,102,104,105,106,107,109,],[4,4,35,-4,-50,-42,-25,-27,-33,-36,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-3,-5,-6,-8,-52,-50,-53,-24,-11,-14,90,-26,-28,-29,-30,-31,-32,-34,-35,-37,-38,-51,-7,-9,-12,-54,-55,-56,-57,-10,-15,-17,-12,-13,-18,107,108,-19,-16,]),'ID':([0,2,4,5,8,10,11,12,13,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,63,64,97,100,],[6,6,-4,39,6,-20,-21,-22,-23,55,6,55,-3,55,6,55,55,55,55,55,55,55,55,55,55,6,6,6,6,39,6,6,6,]),'IF':([0,2,4,8,26,35,42,58,59,60,61,64,97,100,],[8,8,-4,8,8,-3,8,8,8,8,8,8,8,8,]),'INT':([0,2,4,8,26,35,42,58,59,60,61,64,97,100,],[10,10,-4,10,10,-3,10,10,10,10,10,10,10,10,]),'FLOAT':([0,2,4,8,26,35,42,58,59,60,61,64,97,100,],[11,11,-4,11,11,-3,11,11,11,11,11,11,11,11,]),'BOOL':([0,2,4,8,26,35,42,58,59,60,61,64,97,100,],[12,12,-4,12,12,-3,12,12,12,12,12,12,12,12,]),'CHAR':([0,2,4,8,26,35,42,58,59,60,61,64,97,100,],[13,13,-4,13,13,-3,13,13,13,13,13,13,13,13,]),'ENTERO_DECIMAL':([0,2,4,8,17,26,27,35,36,41,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,65,80,97,100,],[7,7,-4,7,7,7,7,-3,7,67,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,88,91,7,7,]),'ENTERO_BINARIO':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[19,19,-4,19,19,19,19,-3,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'ENTERO_OCTAL':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[20,20,-4,20,20,20,20,-3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'ENTERO_HEXADECIMAL':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[21,21,-4,21,21,21,21,-3,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'REAL_DECIMAL':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[22,22,-4,22,22,22,22,-3,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'REAL_CIENTIFICO':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[23,23,-4,23,23,23,23,-3,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'CARACTER':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[25,25,-4,25,25,25,25,-3,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'PE':([0,2,4,8,17,26,27,28,29,30,31,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[26,26,-4,26,26,26,26,58,59,60,61,-3,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'RES':([0,2,4,6,7,8,15,16,17,18,19,20,21,22,23,24,25,26,27,32,33,35,36,42,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,64,71,72,73,74,75,76,77,78,79,81,89,92,93,94,95,97,100,101,],[17,17,-4,-50,-42,17,51,-36,17,-39,-43,-44,-45,-46,-47,-48,-49,17,17,-40,-41,-3,17,17,17,17,17,17,17,17,17,17,17,17,-52,-50,-53,17,17,17,17,17,51,51,51,51,51,-34,-35,-37,-38,-51,-12,-54,-55,-56,-57,17,17,-12,]),'NOT':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[27,27,-4,27,27,27,27,-3,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'SEN':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[28,28,-4,28,28,28,28,-3,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'COS':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[29,29,-4,29,29,29,29,-3,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'EXP':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[30,30,-4,30,30,30,30,-3,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'LOG':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[31,31,-4,31,31,31,31,-3,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'TRUE':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[32,32,-4,32,32,32,32,-3,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'FALSE':([0,2,4,8,17,26,27,35,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[33,33,-4,33,33,33,33,-3,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'OR':([3,6,7,9,14,15,16,18,19,20,21,22,23,24,25,32,33,37,38,39,43,54,55,56,57,62,66,68,70,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,87,89,92,93,94,95,96,98,99,101,102,104,105,107,109,],[36,-50,-42,-25,-27,-33,-36,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-5,-6,-8,36,-52,-50,36,-53,-24,-11,36,-26,-28,-29,-30,-31,-32,-34,-35,-37,-38,-51,36,36,36,36,-7,36,-12,-54,-55,-56,-57,-10,-15,-17,-12,36,-18,36,-19,-16,]),'PNTO':([6,],[40,]),'CE':([6,39,55,],[41,65,80,]),'EQ':([6,39,89,],[42,64,97,]),'MUL':([6,7,16,18,19,20,21,22,23,24,25,32,33,54,55,57,76,77,78,79,81,89,92,93,94,95,101,],[-50,-42,52,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-52,-50,-53,52,52,-37,-38,-51,-12,-54,-55,-56,-57,-12,]),'DIV':([6,7,16,18,19,20,21,22,23,24,25,32,33,54,55,57,76,77,78,79,81,89,92,93,94,95,101,],[-50,-42,53,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-52,-50,-53,53,53,-37,-38,-51,-12,-54,-55,-56,-57,-12,]),'I':([6,7,15,16,18,19,20,21,22,23,24,25,32,33,54,55,57,76,77,78,79,81,89,92,93,94,95,101,],[-50,-42,45,-36,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-52,-50,-53,-34,-35,-37,-38,-51,-12,-54,-55,-56,-57,-12,]),'M':([6,7,15,16,18,19,20,21,22,23,24,25,32,33,54,55,57,76,77,78,79,81,89,92,93,94,95,101,],[-50,-42,46,-36,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-52,-50,-53,-34,-35,-37,-38,-51,-12,-54,-55,-56,-57,-12,]),'m':([6,7,15,16,18,19,20,21,22,23,24,25,32,33,54,55,57,76,77,78,79,81,89,92,93,94,95,101,],[-50,-42,47,-36,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-52,-50,-53,-34,-35,-37,-38,-51,-12,-54,-55,-56,-57,-12,]),'MI':([6,7,15,16,18,19,20,21,22,23,24,25,32,33,54,55,57,76,77,78,79,81,89,92,93,94,95,101,],[-50,-42,48,-36,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-52,-50,-53,-34,-35,-37,-38,-51,-12,-54,-55,-56,-57,-12,]),'mI':([6,7,15,16,18,19,20,21,22,23,24,25,32,33,54,55,57,76,77,78,79,81,89,92,93,94,95,101,],[-50,-42,49,-36,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-52,-50,-53,-34,-35,-37,-38,-51,-12,-54,-55,-56,-57,-12,]),'SUM':([6,7,15,16,18,19,20,21,22,23,24,25,32,33,54,55,57,71,72,73,74,75,76,77,78,79,81,89,92,93,94,95,101,],[-50,-42,50,-36,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-52,-50,-53,50,50,50,50,50,-34,-35,-37,-38,-51,-12,-54,-55,-56,-57,-12,]),'AND':([6,7,9,14,15,16,18,19,20,21,22,23,24,25,32,33,54,55,57,62,70,71,72,73,74,75,76,77,78,79,81,89,92,93,94,95,101,],[-50,-42,44,-27,-33,-36,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-52,-50,-53,44,-26,-28,-29,-30,-31,-32,-34,-35,-37,-38,-51,-12,-54,-55,-56,-57,-12,]),'DPNTO':([6,7,9,14,15,16,18,19,20,21,22,23,24,25,32,33,37,38,39,43,54,55,57,62,66,68,70,71,72,73,74,75,76,77,78,79,81,86,87,89,92,93,94,95,96,98,99,101,102,103,104,107,109,],[-50,-42,-25,-27,-33,-36,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-5,-6,-8,69,-52,-50,-53,-24,-11,-14,-26,-28,-29,-30,-31,-32,-34,-35,-37,-38,-51,-7,-9,-12,-54,-55,-56,-57,-10,-15,-17,-12,-13,106,-18,-19,-16,]),'PS':([6,7,9,14,15,16,18,19,20,21,22,23,24,25,32,33,37,38,39,54,55,56,57,62,66,68,70,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,87,89,92,93,94,95,96,98,99,101,102,104,107,109,],[-50,-42,-25,-27,-33,-36,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-5,-6,-8,-52,-50,81,-53,-24,-11,-14,-26,-28,-29,-30,-31,-32,-34,-35,-37,-38,-51,92,93,94,95,-7,-9,-12,-54,-55,-56,-57,-10,-15,-17,-12,-13,-18,-19,-16,]),'COMA':([6,7,9,14,15,16,18,19,20,21,22,23,24,25,32,33,37,38,39,54,55,57,62,66,68,70,71,72,73,74,75,76,77,78,79,81,86,87,89,92,93,94,95,96,98,99,101,102,104,107,109,],[-50,-42,-25,-27,-33,-36,-39,-43,-44,-45,-46,-47,-48,-49,-40,-41,-5,63,-8,-52,-50,-53,-24,-11,-14,-26,-28,-29,-30,-31,-32,-34,-35,-37,-38,-51,-7,-9,-12,-54,-55,-56,-57,-10,-15,-17,-12,-13,-18,-19,-16,]),'LEN':([40,],[66,]),'CS':([67,88,91,],[89,96,101,]),'TAB':([90,99,107,108,],[100,100,-19,100,]),'ELSE':([98,99,104,107,],[103,-17,-18,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,2,],[1,34,]),'linea':([0,2,],[2,2,]),'expresion':([0,2,8,26,42,58,59,60,61,64,97,100,],[3,3,43,56,68,82,83,84,85,87,102,105,]),'tipo':([0,2,8,26,42,58,59,60,61,64,97,100,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'expresion_logica':([0,2,8,26,36,42,58,59,60,61,64,97,100,],[9,9,9,9,62,9,9,9,9,9,9,9,9,]),'expresion_relacional':([0,2,8,26,36,42,44,58,59,60,61,64,97,100,],[14,14,14,14,14,14,70,14,14,14,14,14,14,14,]),'termino_aritmetico':([0,2,8,26,36,42,44,45,46,47,48,49,58,59,60,61,64,97,100,],[15,15,15,15,15,15,15,71,72,73,74,75,15,15,15,15,15,15,15,]),'factor':([0,2,8,26,36,42,44,45,46,47,48,49,50,51,58,59,60,61,64,97,100,],[16,16,16,16,16,16,16,16,16,16,16,16,76,77,16,16,16,16,16,16,16,]),'elemento':([0,2,8,17,26,27,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[18,18,18,54,18,57,18,18,18,18,18,18,18,18,18,18,78,79,18,18,18,18,18,18,18,]),'booleano':([0,2,8,17,26,27,36,42,44,45,46,47,48,49,50,51,52,53,58,59,60,61,64,97,100,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'lista_declaraciones':([5,63,],[37,86,]),'declaracion':([5,63,],[38,38,]),'bloque_tabulado':([90,99,108,],[98,104,109,]),'linea_tabulada':([90,99,108,],[99,99,99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> linea programa','programa',2,'p_programa','parser.py',37),
  ('programa -> <empty>','programa',0,'p_programa','parser.py',38),
  ('linea -> expresion NEWLINE','linea',2,'p_linea','parser.py',42),
  ('linea -> NEWLINE','linea',1,'p_linea','parser.py',43),
  ('expresion -> tipo lista_declaraciones','expresion',2,'p_declaracion_variable','parser.py',49),
  ('lista_declaraciones -> declaracion','lista_declaraciones',1,'p_lista_declaraciones','parser.py',106),
  ('lista_declaraciones -> declaracion COMA lista_declaraciones','lista_declaraciones',3,'p_lista_declaraciones','parser.py',107),
  ('declaracion -> ID','declaracion',1,'p_declaracion','parser.py',115),
  ('declaracion -> ID EQ expresion','declaracion',3,'p_declaracion','parser.py',116),
  ('declaracion -> ID CE ENTERO_DECIMAL CS','declaracion',4,'p_declaracion','parser.py',117),
  ('expresion -> ID PNTO LEN','expresion',3,'p_expresion_vector_len','parser.py',133),
  ('elemento -> ID CE ENTERO_DECIMAL CS','elemento',4,'p_elemento_acceso_vector','parser.py',143),
  ('expresion -> ID CE ENTERO_DECIMAL CS EQ expresion','expresion',6,'p_asignacion_vector_elemento','parser.py',160),
  ('expresion -> ID EQ expresion','expresion',3,'p_asignacion_variable','parser.py',177),
  ('expresion -> IF expresion DPNTO NEWLINE bloque_tabulado','expresion',5,'p_expresion_if_simple','parser.py',215),
  ('expresion -> IF expresion DPNTO NEWLINE bloque_tabulado ELSE DPNTO NEWLINE bloque_tabulado','expresion',9,'p_expresion_if_else','parser.py',226),
  ('bloque_tabulado -> linea_tabulada','bloque_tabulado',1,'p_bloque_tabulado','parser.py',238),
  ('bloque_tabulado -> linea_tabulada bloque_tabulado','bloque_tabulado',2,'p_bloque_tabulado','parser.py',239),
  ('linea_tabulada -> TAB expresion NEWLINE','linea_tabulada',3,'p_linea_tabulada','parser.py',246),
  ('tipo -> INT','tipo',1,'p_tipo','parser.py',257),
  ('tipo -> FLOAT','tipo',1,'p_tipo','parser.py',258),
  ('tipo -> BOOL','tipo',1,'p_tipo','parser.py',259),
  ('tipo -> CHAR','tipo',1,'p_tipo','parser.py',260),
  ('expresion -> expresion OR expresion_logica','expresion',3,'p_expresion','parser.py',264),
  ('expresion -> expresion_logica','expresion',1,'p_expresion','parser.py',265),
  ('expresion_logica -> expresion_logica AND expresion_relacional','expresion_logica',3,'p_expresion_logica','parser.py',272),
  ('expresion_logica -> expresion_relacional','expresion_logica',1,'p_expresion_logica','parser.py',273),
  ('expresion_relacional -> termino_aritmetico I termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',280),
  ('expresion_relacional -> termino_aritmetico M termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',281),
  ('expresion_relacional -> termino_aritmetico m termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',282),
  ('expresion_relacional -> termino_aritmetico MI termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',283),
  ('expresion_relacional -> termino_aritmetico mI termino_aritmetico','expresion_relacional',3,'p_expresion_relacional','parser.py',284),
  ('expresion_relacional -> termino_aritmetico','expresion_relacional',1,'p_expresion_relacional','parser.py',285),
  ('termino_aritmetico -> termino_aritmetico SUM factor','termino_aritmetico',3,'p_termino_aritmetico','parser.py',296),
  ('termino_aritmetico -> termino_aritmetico RES factor','termino_aritmetico',3,'p_termino_aritmetico','parser.py',297),
  ('termino_aritmetico -> factor','termino_aritmetico',1,'p_termino_aritmetico','parser.py',298),
  ('factor -> factor MUL elemento','factor',3,'p_factor','parser.py',308),
  ('factor -> factor DIV elemento','factor',3,'p_factor','parser.py',309),
  ('factor -> elemento','factor',1,'p_factor','parser.py',310),
  ('booleano -> TRUE','booleano',1,'p_booleano','parser.py',324),
  ('booleano -> FALSE','booleano',1,'p_booleano','parser.py',325),
  ('elemento -> ENTERO_DECIMAL','elemento',1,'p_elemento','parser.py',329),
  ('elemento -> ENTERO_BINARIO','elemento',1,'p_elemento','parser.py',330),
  ('elemento -> ENTERO_OCTAL','elemento',1,'p_elemento','parser.py',331),
  ('elemento -> ENTERO_HEXADECIMAL','elemento',1,'p_elemento','parser.py',332),
  ('elemento -> REAL_DECIMAL','elemento',1,'p_elemento','parser.py',333),
  ('elemento -> REAL_CIENTIFICO','elemento',1,'p_elemento','parser.py',334),
  ('elemento -> booleano','elemento',1,'p_elemento','parser.py',335),
  ('elemento -> CARACTER','elemento',1,'p_elemento','parser.py',336),
  ('elemento -> ID','elemento',1,'p_elemento','parser.py',337),
  ('elemento -> PE expresion PS','elemento',3,'p_elemento','parser.py',338),
  ('elemento -> RES elemento','elemento',2,'p_elemento','parser.py',339),
  ('elemento -> NOT elemento','elemento',2,'p_elemento','parser.py',340),
  ('elemento -> SEN PE expresion PS','elemento',4,'p_elemento','parser.py',341),
  ('elemento -> COS PE expresion PS','elemento',4,'p_elemento','parser.py',342),
  ('elemento -> EXP PE expresion PS','elemento',4,'p_elemento','parser.py',343),
  ('elemento -> LOG PE expresion PS','elemento',4,'p_elemento','parser.py',344),
]
